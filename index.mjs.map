{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isFinite = require( '@stdlib/assert-is-finite' ).isPrimitive; // eslint-disable-line stdlib/no-redeclare\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar returns = [\n\t'terms',\n\t'convergents',\n\t'*'\n];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.iter] - maximum number of iterations\n* @param {PositiveNumber} [options.tol] - tolerance at which to terminate further evaluation of the continued fraction\n* @param {string} [options.returns] - specifies the type of result to return (must be one of `'terms'`, `'convergents'`, or `'*'`)\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 50\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'tol' ) ) {\n\t\topts.tol = options.tol;\n\t\tif ( !isFinite( options.tol ) || options.tol <= 0.0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive finite number. Option: `%s`.', 'tol', options.tol ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'returns' ) ) {\n\t\topts.returns = options.returns;\n\t\tif ( returns.indexOf( options.returns ) === -1 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'returns', returns.join( '\", \"' ), options.returns ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isFinite = require( '@stdlib/assert-is-finite' ).isPrimitive; // eslint-disable-line stdlib/no-redeclare\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar format = require( '@stdlib/string-format' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar EPS = require( '@stdlib/constants-float64-eps' );\nvar FIFO = require( '@stdlib/utils-fifo' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar TINY = 1.0e-50;\nvar RESULT_FUNCTION = {\n\t'terms': terms,\n\t'convergents': convergents,\n\t'*': both\n};\n\n\n// FUNCTIONS //\n\n/**\n* Returns a continued fraction term result.\n*\n* @private\n* @param {number} term - continued fraction term\n* @param {number} convergent - continued fraction convergent\n* @param {boolean} negative - boolean indicating whether the input value is negative\n* @returns {number} term\n*/\nfunction terms( term, convergent, negative ) {\n\treturn ( negative && term > 0 ) ? -term : term;\n}\n\n/**\n* Returns a continued fraction convergent result.\n*\n* @private\n* @param {number} term - continued fraction term\n* @param {number} convergent - continued fraction convergent\n* @param {boolean} negative - boolean indicating whether the input value is negative\n* @returns {number} convergent\n*/\nfunction convergents( term, convergent, negative ) {\n\treturn ( negative && term > 0 ) ? -convergent : convergent;\n}\n\n/**\n* Returns a result as two-element array consisting of a continued fraction term and its associated convergent.\n*\n* @private\n* @param {number} term - continued fraction term\n* @param {number} convergent - continued fraction convergent\n* @param {boolean} negative - boolean indicating whether the input value is negative\n* @returns {Array<number>} result\n*/\nfunction both( term, convergent, negative ) {\n\treturn ( negative && term > 0 ) ? [ -term, -convergent ] : [ term, convergent ]; // eslint-disable-line max-len\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a list of all continued fraction terms which can be obtained given the precision of `x`.\n*\n* ## Notes\n*\n* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.\n*\n* @param {number} x - input value\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.iter=1e308] - maximum number of iterations\n* @param {PositiveNumber} [options.tol] - tolerance at which to terminate further evaluation of the continued fraction\n* @param {string} [options.returns='terms'] - specifies the type of result to return (must be one of `'terms'`, `'convergents'`, or `'*'`)\n* @throws {TypeError} first argument must be a finite number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterContinuedFractionSeq( 3.245 );\n*\n* var v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 4\n*\n* v = iter.next().value;\n* // returns 12\n*\n* v = iter.next().value;\n* // returns 4\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction iterContinuedFractionSeq( x, options ) {\n\tvar result;\n\tvar delta;\n\tvar orig;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar neg;\n\tvar bi;\n\tvar fi;\n\tvar Ci;\n\tvar Di;\n\tvar q;\n\tvar v;\n\tvar r;\n\tvar i;\n\n\tif ( !isFinite( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a finite number. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'iter': 1e308,\n\t\t'tol': EPS,\n\t\t'returns': 'terms'\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tresult = RESULT_FUNCTION[ opts.returns ];\n\tFLG = 0;\n\torig = x;\n\n\t// If `x < 0`, we choose to negate the terms (i.e., [b0; b1, b2, ..., bn] => [-b0; -b1, -b2, ..., -bn]), thus allowing the evaluation of those terms to return the input value. This differs from an alternative approach of having only a negative `b0` and the rest `{b1, ..., bn}` be positive. When doing the latter, floating-point rounding error can prevent recovering the original value...\n\tif ( x < 0 ) {\n\t\tneg = true;\n\t\tx = -x;\n\t} else {\n\t\tneg = false;\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// Continued fractions may not be unique (e.g., [b0; b1, ..., bn, 1] = [b0; b1, ..., bn+1]). Accordingly, in order to ensure we return a canonical representation (i.e., the shorter representation), returned values must lag by two terms, as we'll need to peek ahead to determine if we need to canonicalize before returning the last term. In which case, let's create a FIFO queue for storing terms and their associated convergents...\n\tq = new FIFO();\n\n\t// Extract the integer part of the provided value:\n\tbi = floor( x );\n\tq.push( [ bi, bi ] ); // b0 is both the first term and the first convergent\n\tif ( bi === x ) {\n\t\t// We've been provided an integer value, so no continued fractions to compute...\n\t\tFLG = 1;\n\t\treturn iter;\n\t}\n\t// For `0 < x < 1`, leverage the fact that continued fraction representations of a positive rational number and its reciprocal are identical, except for shifting one place to the right (i.e., [b0; b1, b1, ..., bn] and [0; b0, b1, b2, ..., bn] are reciprocals)...\n\tif ( bi === 0 ) {\n\t\tx = 1.0 / x;\n\t\tbi = floor( x );\n\t\tq.push( [ bi, 1.0/bi ] );\n\t\tif ( bi === x ) {\n\t\t\t// No more continued fractions to compute...\n\t\t\tFLG = 1;\n\t\t\treturn iter;\n\t\t}\n\t}\n\t// Compute the next term of the continued fraction...\n\tr = x - bi;\n\tv = 1.0 / r;\n\n\t// Initialize parameters of the modified Lentz's algorithm...\n\tfi = bi;\n\tCi = fi;\n\tDi = 0.0;\n\n\t// Compute the next two terms:\n\tq.push( nextTerm() );\n\tq.push( nextTerm() );\n\n\treturn iter;\n\n\t/**\n\t* Computes the next term of the continued fraction.\n\t*\n\t* @private\n\t* @returns {number} next term\n\t*/\n\tfunction nextTerm() {\n\t\tvar fj = fi;\n\n\t\t// Compute the next term of the continued fraction...\n\t\tbi = floor( v );\n\t\tr = v - bi;\n\t\tv = 1.0 / r;\n\n\t\t// Use the modified Lentz's algorithm to find the next convergent...\n\t\tDi += bi;             // b_j + a_j*D_{j-1}, where a_j = 1.0 for all j\n\t\tif ( Di === 0.0 ) {\n\t\t\tDi = TINY;\n\t\t}\n\t\tCi = bi + ( 1.0/Ci ); // b_j + a_j/C_{j-1}, where a_j = 1.0 for all j\n\t\tif ( Ci === 0.0 ) {\n\t\t\tCi = TINY;\n\t\t}\n\t\tDi = 1.0 / Di;\n\t\tdelta = Ci * Di;\n\t\tfi *= delta;\n\n\t\t// Check whether we can terminate computation...\n\t\tif ( abs( delta - 1.0 ) <= opts.tol ) {\n\t\t\tFLG = 1;\n\t\t\tif ( fj === fi ) {\n\t\t\t\t// Return a sentinel value to indicate that the last term did not improve the approximation:\n\t\t\t\treturn [ -1, fi ];\n\t\t\t}\n\t\t}\n\t\treturn [ bi, fi ];\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar item;\n\t\tvar term;\n\t\tvar f;\n\n\t\ti += 1;\n\t\tif ( FLG > 0 ) {\n\t\t\tif ( FLG === 1 && q.length > 0 ) {\n\t\t\t\titem = q.pop();\n\t\t\t\tterm = item[ 0 ];\n\t\t\t\tf = item[ 1 ];\n\t\t\t\tif ( term === -1 ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// Check whether we need to adjust the current term to ensure canonical representation...\n\t\t\t\titem = q.first();\n\t\t\t\tif ( q.length === 2 && item[ 0 ] === 1 ) {\n\t\t\t\t\tterm += 1;\n\t\t\t\t\tf = item[ 1 ];\n\t\t\t\t\tq.clear();\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'value': result( term, f, neg ),\n\t\t\t\t\t'done': false\n\t\t\t\t};\n\t\t\t}\n\t\t\tFLG = 2;\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i === opts.iter ) {\n\t\t\titem = q.pop();\n\t\t\tterm = item[ 0 ];\n\t\t\tf = item[ 1 ];\n\n\t\t\t// Check whether we need to adjust the final term to ensure canonical representation...\n\t\t\titem = q.first();\n\t\t\tif ( item[ 0 ] === 1 ) {\n\t\t\t\tterm += 1;\n\t\t\t\tf = item[ 1 ];\n\t\t\t}\n\t\t\tq.clear();\n\t\t\tFLG = 2;\n\t\t\treturn {\n\t\t\t\t'value': result( term, f, neg ),\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\titem = q.push( nextTerm() ).pop();\n\t\treturn {\n\t\t\t'value': result( item[ 0 ], item[ 1 ], neg ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = 2;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterContinuedFractionSeq( orig, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterContinuedFractionSeq;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a list of all continued fraction terms which can be obtained given the precision of `x`.\n*\n* @module @stdlib/math-iter-sequences-continued-fraction\n*\n* @example\n* var iterContinuedFractionSeq = require( '@stdlib/math-iter-sequences-continued-fraction' );\n*\n* var iter = iterContinuedFractionSeq( 3.245 );\n*\n* var v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 4\n*\n* v = iter.next().value;\n* // returns 12\n*\n* v = iter.next().value;\n* // returns 4\n*\n* var bool = iter.next().done;\n* // returns true\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n"],"names":["isPlainObject","require$$0","hasOwnProp","require$$1","isNonNegativeInteger","require$$2","isPrimitive","isFinite","require$$3","format","require$$4","returns","validate_1","opts","options","iter","TypeError","tol","indexOf","join","setReadOnly","iteratorSymbol","floor","abs","require$$5","EPS","require$$6","FIFO","require$$7","validate","require$$8","RESULT_FUNCTION","terms","term","convergent","negative","convergents","main","iterContinuedFractionSeq","x","result","delta","orig","FLG","err","neg","bi","fi","Ci","Di","q","v","i","arguments","length","next","end","factory","push","nextTerm","fj","item","f","pop","done","first","clear","value","lib"],"mappings":"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"}